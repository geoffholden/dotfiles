" General Options {{{
set nocompatible
scriptencoding utf-8
set encoding=utf-8

set dictionary=/usr/share/dict/words
filetype off
autocmd!

set splitright
set splitbelow
" }}}
" Plugins {{{
call plug#begin('~/.vim/plugged')
Plug 'kien/ctrlp.vim'
Plug 'ajh17/VimCompletesMe'
Plug 'tpope/vim-commentary'
Plug 'vim-scripts/OmniCppComplete'
Plug 'majutsushi/tagbar'
Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'moorereason/vim-markdownfmt', { 'for': 'markdown' }
Plug 'tpope/vim-unimpaired'
Plug 'benmills/vimux'
Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'scrooloose/syntastic'
Plug 'spiiph/vim-space'
Plug 'junegunn/vim-easy-align'
Plug 'cespare/vim-toml', { 'for': 'toml' }
Plug 'amperser/proselint', { 'rtp': 'plugins/vim/syntastic_proselint' }
" Syntax Only
Plug 'aklt/plantuml-syntax'
Plug 'freitass/todo.txt-vim'
Plug 'vim-scripts/ditaa'
Plug 'tpope/vim-markdown', { 'for': 'markdown' }
Plug 'tpope/vim-git'
" Python
Plug 'tmhedberg/SimpylFold', { 'for': 'python' }
Plug 'vim-scripts/indentpython.vim', { 'for': 'python' }
Plug 'nvie/vim-flake8', { 'for': 'python' }
Plug 'Chiel92/vim-autoformat', { 'for': 'python' } " Limit this to Python for now.
" JavaScript/JSX
Plug 'pangloss/vim-javascript', { 'for': ['javascript','javascript.jsx'] }
Plug 'mxw/vim-jsx', { 'for': 'javascript.jsx' }
call plug#end()
" }}}
" Theme {{{
set t_Co=256
colorscheme molokai

syntax enable
" }}}
" Vim UI {{{
set noswapfile
set number
set nohlsearch
set incsearch
set ruler
set scrolloff=4
set cursorline
set statusline=%F%m%r%h%w\ %{fugitive#statusline()}\ [%l,%c]\ [%L,%p%%]
set laststatus=2
let mapleader = ","
set spelllang=en_ca
set nospell
set listchars=tab:▸\ ,eol:¬

highlight ColorColumn ctermbg=234 guibg=#293739
if exists('+colorcolumn')
    set colorcolumn=80
endif

nnoremap <silent> <Leader>b :TagbarToggle<CR>
nmap <leader>g :tag<space>
map <silent> <C-n> :NERDTreeToggle<CR>

nnoremap <silent> <Leader>c<Space> :Commentary<CR>
vnoremap <silent> <Leader>c<Space> :Commentary<CR>
" }}}
" Text Formatting {{{
filetype on
filetype plugin indent on
set autoindent
set tabstop=4
set softtabstop=4
set shiftwidth=4
set shiftround
set expandtab
" }}}
" StripWhitespace {{{
function! StripWhitespace ()
    exec ':%s/ \+$//gc'
endfunction
map ,w :call StripWhitespace ()<CR>
" }}}
" VimCompletesMe {{{
autocmd FileType text,markdown let b:vcm_tab_complete = 'dict'

" Don't autocomplete after a -
inoremap -<Tab> -<Tab>
" }}}
" easy-align {{{
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
" }}}
" CtrlP {{{
let g:ctrlp_extensions = ['tag', 'buffertag', 'mixed']
" }}}
" Airline {{{
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif
let g:airline_symbols.space = "\ua0"

let g:airline#extensions#default#section_truncate_width = {
      \ 'b': 79,
      \ 'x': 60,
      \ 'y': 120,
      \ 'z': 45,
      \ }
" }}}
" MacVim {{{
if has('macunix')
    set guifont=Menlo\ for\ Powerline
endif
" }}}
" Folding {{{
set foldmethod=syntax
set foldnestmax=2
set nofoldenable
nnoremap [of :set foldenable<CR>
nnoremap ]of :set nofoldenable<CR>
nnoremap cof :set <C-R>=eval('&foldenable') ? 'nofoldenable' : 'foldenable'<CR><CR>
" }}}
" vimrc auto-reload {{{
if has("autocmd")
    autocmd BufWritePost .vimrc source $MYVIMRC        | doautocmd BufRead
    autocmd BufWritePost vimrc source $MYVIMRC         | doautocmd BufRead
    autocmd BufWritePost vimrc.symlink source $MYVIMRC | doautocmd BufRead
endif
" }}}
" Disable Arrow Keys {{{
inoremap <Up> <Nop>
noremap  <Up> <Nop>
inoremap <Down> <Nop>
noremap  <Down> <Nop>
inoremap <Left> <Nop>
noremap  <Left> <Nop>
inoremap <Right> <Nop>
noremap  <Right> <Nop>
" }}}
" Tmux {{{
" Transfer default register to/from tmux paste buffer
function! RegisterToTmux ()
    call system('tmux load-buffer -', getreg())
endfunction
function! TmuxToRegister ()
    call setreg(v:register, system('tmux save-buffer -'))
endfunction
map <silent> <Leader>tp :call RegisterToTmux()<CR>
map <silent> <Leader>tg :call TmuxToRegister()<CR>

let g:VimuxUseNearest = 0
" }}}
" markdownfmt {{{
let g:markdownfmt_command = 'mdfmt'
let g:markdownfmt_autosave = 1
let g:markdown_fenced_languages = ['cpp', 'go', 'ditaa', 'dot', 'plantuml', 'python']
" }}}
" syntastic {{{
let g:syntastic_always_populate_loc_list = 1
" }}}
" proselint {{{
let g:syntastic_markdown_checkers = ['proselint']
let g:syntastic_text_checkers = ['proselint']
let g:syntastic_html_checkers = ['tidy', 'w3', 'proselint']
let g:syntastic_xhtml_checkers = ['tidy', 'w3', 'proselint']
let g:syntastic_tex_checkers = ['proselint']
" }}}
" Python {{{
let g:SimpylFold_docstring_preview=1
let g:flake8_max_line_length=120
" }}}
" Large File Function {{{
" https://github.com/tejr/dotfiles/blob/4f9e40bc40242a8e110ad87908936c835ad1b804/vim/vimrc#L565-L579
" When opening a large file, take some measures to keep things loading quickly
if has('eval') && has('autocmd')

  " Threshold is 10 MB in size
  let g:bigfilesize = 10 * 1024 * 1024

  " Declare function for turning off slow options
  function! BigFileMeasures()
    let l:file = expand("<afile>")
    if getfsize(l:file) > g:bigfilesize
      setlocal nobackup
      setlocal nowritebackup
      setlocal noswapfile
      if has('persistent_undo')
        setlocal noundofile
      endif
      if exists('&synmaxcol')
        setlocal synmaxcol=256
      endif
    endif
  endfunction

  " Define autocmd for calling to check filesize
  augroup bigfilesize
    autocmd!
    autocmd BufReadPre * call BigFileMeasures()
  augroup end
endif
" }}}
" Misc Mappings {{{
nmap S :%s//g<LEFT><LEFT>
nmap <expr> M ':%s/' . @/ . '//g<LEFT><LEFT>'
" }}}
" vim:foldmethod=marker:foldlevel=0:foldenable
